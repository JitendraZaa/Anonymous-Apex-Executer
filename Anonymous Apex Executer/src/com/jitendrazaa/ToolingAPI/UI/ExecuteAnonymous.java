/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.jitendrazaa.ToolingAPI.UI;

 
import com.jitendrazaa.ToolingAPI.Util;
import com.sforce.soap.tooling.ExecuteAnonymousResult;
import com.sforce.soap.tooling.SoapConnection;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
 
/**
 *
 * @author Jitendra
 */
public class ExecuteAnonymous  extends javax.swing.JFrame {

    /**
     * Use the Log window of Main Window
     */
    public LogWindow log = null;
    
    /**
     * Creates new form ExecuteAnonymous
     */
    public ExecuteAnonymous() {
        initComponents(); 
        Util.centerWindow(this);
        instantiateLogWindow(); 
        refreshSettings();
    }
    
     /**
     * This method is used to reload all the GUI Component Windows
     */
    public final void refreshSettings()
    { 
        FileFilter apexClassType = new FileNameExtensionFilter("Apex Class (*.class)", "class") ;
        folderChooser.setFileFilter(apexClassType);
        folderChooser.addChoosableFileFilter(apexClassType);
    }
    
    /**
     * Instantiate the Log Window
     */
    private void instantiateLogWindow()
    {
        if(log == null)
        {
            SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                    log = new LogWindow();
                }
            });
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        folderChooser = new javax.swing.JFileChooser();
        jLabel4 = new javax.swing.JLabel();
        txtUserName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtLoopTimes = new javax.swing.JTextField();
        txtPause = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtCode = new javax.swing.JTextArea();
        btnExecute = new javax.swing.JButton();
        btnBrowse = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtPasword = new javax.swing.JPasswordField();
        chkIsSandBox = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        txtProxyAddress = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtPort = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtProxyUser = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtProxyPassword = new javax.swing.JPasswordField();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Execute Anonymous Code");

        jLabel4.setText("User Name :");

        jLabel1.setText("Loop");

        txtLoopTimes.setText("3000");

        txtPause.setText("400");

        jLabel5.setText("Pause (ms)");

        txtCode.setColumns(20);
        txtCode.setRows(5);
        txtCode.setText("List<PSS_Product_Selected__c> lstProductSelected = [SELECT  PSS_Opportunity__c, \n                                                    PSS_Opportunity__r.Rate_Only_renewal__c , \n\t\t\t\t\t\t\t\t\t\t\t\t\tPSS_Opportunity__r.PSUID_Text__c ,                                                                                                                                                                                                   \n                                                    TPID__c FROM PSS_Product_Selected__c \n                                                    WHERE TPID__c != null  \n                                                    AND \n                                                    PSS_Opportunity__r.Rate_Only_renewal__c = false\n\t\t\t\t\t\t\t\t\t\t\t\t\tAND\n\t\t\t\t\t\t\t\t\t\t\t\t\tPSS_Opportunity__r.PSUID_Text__c != null\n\t\t\t\t\t\t\t\t\t\t\t\t\tAND\n\t\t\t\t\t\t\t\t\t\t\t\t\tPSS_Opportunity__r.Developer_Note__c = null\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t];\nSystem.debug('** Count **'+lstProductSelected.size());\n\n//PSS Opp - Key, TPID - Value\nMap<Id,Set<String>> mpPSSOpp = new Map<Id,Set<String>>();\n\n//PSS Opp - Key , PSUID - Value\nMap<Id,Decimal> mpPSSOpp_PSUID = new Map<Id,Decimal>();\n\n\n\n\nfor(PSS_Product_Selected__c p : lstProductSelected)\n{\n\tSet<String> setTPIDOnOpp = mpPSSOpp.get(p.PSS_Opportunity__c);\n\t\n\tif(setTPIDOnOpp == null)\n\t\tsetTPIDOnOpp = new Set<String>();\n\t\n\tsetTPIDOnOpp.add(p.TPID__c);               \n\tmpPSSOpp.put(p.PSS_Opportunity__c, setTPIDOnOpp) ;\n\tmpPSSOpp_PSUID.put(p.PSS_Opportunity__c, Decimal.valueOf( p.PSS_Opportunity__r.PSUID_Text__c) );\n}\n\n//COmplete only 1 PSS Opp at a time and then Break\nfor(String pssOppId : mpPSSOpp.keyset())\n{\n\tSet<String> setTPIDOnOpp = mpPSSOpp.get(pssOppId) ;\n\tSet<String> activeTPIDSet = new set<String>() ; \n\t\n\tList<PSS_Plan_Summary__c> p = [Select \n\t\t\t\t\t\t\t\t\t\tPlan_Id__c \n\t\t\t\t\t\t\t\t\tFROM \n\t\t\t\t\t\t\t\t\t\tPSS_Plan_Summary__c \n\t\t\t\t\t\t\t\t\tWHERE \n\t\t\t\t\t\t\t\t\t\tPlan_Id__c IN :setTPIDOnOpp \n\t\t\t\t\t\t\t\t\tAND \n\t\t\t\t\t\t\t\t\t\tStatus__c != 'CANCEL' \n\t\t\t\t\t\t\t\t\tAND \n\t\t\t\t\t\t\t\t\t\tStatus__c != 'PURGE'\n\t\t\t\t\t\t\t\t\tAND \n\t\t\t\t\t\t\t\t\t\tStatus__c != 'DELETE'\n\t\t\t\t\t\t\t\t\tAND \n\t\t\t\t\t\t\t\t\t\tPSUID__c = :mpPSSOpp_PSUID.get(pssOppId)] ;\n\tfor(PSS_Plan_Summary__c pObj : p)\n\t{\n\t\tactiveTPIDSet.add(pObj.Plan_Id__c);\n\t}\n\tif(setTPIDOnOpp.size() == activeTPIDSet.size())\n\t{\n\t\tPSS_opportunity__c psstoUpdate = new PSS_opportunity__c(Id=pssOppId, Rate_Only_renewal__c = true, Developer_Note__c = 'Processed by Renewal Script');\n\t\tupdate psstoUpdate ;\n\t\tSystem.debug('*** Its Rate Only Renewal and record being updated is ***'+pssOppId);\n\t\tSystem.debug('*** TPID in PSS Opp ***'+setTPIDOnOpp.size());\n\t\tSystem.debug('*** Active TPID ***'+activeTPIDSet.size());\n\t\t\t\t\n\t}else{ \n\t\tPSS_opportunity__c psstoUpdate = new PSS_opportunity__c(Id=pssOppId, Developer_Note__c = 'Processed by Renewal Script' );\n\t\tupdate psstoUpdate ;\n\t\t\n\t\tSystem.debug('*** NOT Rate Only Renewal and record being updated is ***'+pssOppId);\n\t\tSystem.debug('*** TPID in PSS Opp ***'+setTPIDOnOpp.size());\n\t\tSystem.debug('*** Active TPID ***'+activeTPIDSet.size());\n\t}\n\tbreak; \n}\nSystem.debug('** PSS Opp Count **'+mpPSSOpp.keyset().size());\n");
        jScrollPane1.setViewportView(txtCode);

        btnExecute.setBackground(new java.awt.Color(204, 204, 204));
        btnExecute.setText("Execute");
        btnExecute.setOpaque(false);
        btnExecute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExecuteActionPerformed(evt);
            }
        });

        btnBrowse.setText("Browse Code");
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseActionPerformed(evt);
            }
        });

        btnSave.setText("Save Code");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        jLabel2.setText("Password :");

        chkIsSandBox.setText("Is Sandbox ?");

        jLabel3.setText("Proxy Address :");

        jLabel6.setText("Proxy Port :");

        jLabel7.setText("Proxy Username :");

        jLabel8.setText("Proxy Password :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtProxyAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtProxyUser, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtProxyPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnBrowse)
                            .addGap(34, 34, 34)
                            .addComponent(btnSave)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 447, Short.MAX_VALUE)
                            .addComponent(btnExecute, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(txtLoopTimes, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(47, 47, 47)
                            .addComponent(jLabel5)
                            .addGap(24, 24, 24)
                            .addComponent(txtPause, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(jLabel4)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(txtPasword, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(45, 45, 45)
                            .addComponent(chkIsSandBox))
                        .addComponent(jScrollPane1)
                        .addComponent(jSeparator1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(txtPasword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkIsSandBox))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtProxyAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(txtProxyUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(txtProxyPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(txtLoopTimes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtPause, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBrowse)
                    .addComponent(btnSave)
                    .addComponent(btnExecute, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnExecuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExecuteActionPerformed
        
        if(validateInputs())
        {
            
            (new Thread()
                {
                    @Override
                    public void run(){
                        try{
                            log.setVisible(true);
                            
                            SoapConnection toolCon =  new Util().login(txtUserName.getText(), new String(txtPasword.getPassword()), chkIsSandBox.isSelected(),
                                    txtProxyAddress.getText(), txtPort.getText(), txtProxyUser.getText(), new String(txtProxyPassword.getPassword()) ) ;
                             
                            int loopCounter = Integer.valueOf(txtLoopTimes.getText()) ;
                            int pauseInMili = Integer.valueOf(txtPause.getText()) ;
                            
                            int counter = 0;
                            
                            while(counter < loopCounter)
                            {
                                ExecuteAnonymousResult result = toolCon.executeAnonymous(txtCode.getText());
                                if(result.isCompiled())
                                {
                                    log.messageln("Code Executed succesfully");
                                }
                                else{
                                    log.messageln(result.getCompileProblem());
                                }
                                counter++;
                                if(pauseInMili > 0)
                                {
                                    Thread.sleep(pauseInMili);
                                    log.messageln(".... Pause - "+pauseInMili+" , Loop completed -> "+ counter 
                                                    +", Remaining Counter -> "+ (loopCounter - counter));
                                }
                            } 
                            log.messageln("All Anonymous Code is executed succesfully");
                        }catch(Exception e)
                        {
                            log.messageln(Util.stackTraceToString(e));
                        }
                    }
                }).start();
        }
    }//GEN-LAST:event_btnExecuteActionPerformed

    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed
        int returnVal = folderChooser.showOpenDialog(this);
        if (returnVal == folderChooser.APPROVE_OPTION) {
            File file = folderChooser.getSelectedFile();
            try
            {
                BufferedReader in = new BufferedReader(new FileReader(file));
                String line = in.readLine();
                while(line != null){
                  txtCode.append(line + "\n");
                  line = in.readLine();
                } 
                in.close();
            }catch(Exception e)
            {
                Util.showMessage(this, "Error - "+e.getMessage());
            }
        }
    }//GEN-LAST:event_btnBrowseActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        File locatonToSave = getSaveLocation() ;
        if( locatonToSave != null)
        {
            try{
                BufferedWriter writer = new BufferedWriter(new FileWriter(locatonToSave, true)); // true for append
                txtCode.write(writer);
                writer.close();
                Util.showMessage(this, "Code Saved!!!");
            }catch(Exception e)
            {
                Util.showMessage(this, "Error - "+e.getMessage());
            }
        } 
    }//GEN-LAST:event_btnSaveActionPerformed
 
    private File getSaveLocation() { 
        folderChooser.setFileSelectionMode(folderChooser.FILES_ONLY); 
        folderChooser.setSelectedFile(new File("AnonyousCode.class"));
        int result = folderChooser.showSaveDialog(this);

        if (result == folderChooser.APPROVE_OPTION) {
            return folderChooser.getSelectedFile();
        } else {
            return null;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowse;
    private javax.swing.JButton btnExecute;
    private javax.swing.JButton btnSave;
    private javax.swing.JCheckBox chkIsSandBox;
    private javax.swing.JFileChooser folderChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea txtCode;
    private javax.swing.JTextField txtLoopTimes;
    private javax.swing.JPasswordField txtPasword;
    private javax.swing.JTextField txtPause;
    private javax.swing.JTextField txtPort;
    private javax.swing.JTextField txtProxyAddress;
    private javax.swing.JPasswordField txtProxyPassword;
    private javax.swing.JTextField txtProxyUser;
    private javax.swing.JTextField txtUserName;
    // End of variables declaration//GEN-END:variables

    /**
     * Validate if input is valid
     * @return 
     */
    private boolean validateInputs() {
        try { 
            Integer.parseInt(txtLoopTimes.getText()); 
            Integer.parseInt(txtPause.getText()); 
        } catch(NumberFormatException e) { 
            Util.showMessage(this, "Error : Loop Counter and Pause must be valid numbers ");
            return false; 
        }
        return true ;
    }
}
